=render "layouts/menus"
.container-fluid
  %form{:action => users_path, :autocomplete => "off"}
    .autocomplete{:style => "width:300px;"}
      %input#myInput{:name => "term", :placeholder => "Search User", :type => "text", onclick: "getAutocomplete()"}
    %button{:type => "submit", class: "ui button"} 
      Search
  .ui.segment
    =render "layouts/flash_message"
    %h1 Users
    .ui.link.cards
      - @users.each do |user|
        .card
          .image
            %img{:src => "https://semantic-ui.com/images/avatar2/large/matthew.png"}/
          .content
            .header 
              = link_to user.name, user_path(user.id), class: "ui item"
            .meta
              - if Friend.where(friend_id: user.id, user: current_user).exists?
                Friends
              - else
                Unfriend
            .description
              Joined in #{user.created_at.strftime("%Y")}
              %br
              Matthew is an interior designer living in New York.
          .extra.content
            %span.right.floated
              - if user.id != current_user.id
                - if Friend.where(friend_id: user.id, user: current_user).exists?
                  = button_to remove_friend_user_path(user.id), class: "ui vertical animated button", method: :get do
                    .visible.content 
                      %i.icon.user
                      Followed
                    .hidden.content unfollow
                - else
                  = button_to add_friend_user_path(user.id), class: "ui vertical animated button", method: :get do
                    .visible.content 
                      %i.icon.user
                      Add
                    .hidden.content Follow
            %span
              .ui.labeled.button{:tabindex => "0"}
                .ui.button{"data-position" => "top left", "data-tooltip" => "#{user.name} has #{Friend.where(user: user.id).count()} friends"}
                  %i.users.icon
                %a.ui.basic.label
                  #{Friend.where(user: user.id).count()}

:css
  * {
    box-sizing: border-box;
  }

  body {
    font: 14px Arial;  
  }

  /*the container must be positioned relative:*/
  .autocomplete {
    position: relative;
    display: inline-block;
  }

  input {
    border: 1px solid transparent;
    background-color: #f1f1f1;
    padding: 9px;
    font-size: 14px;
  }

  input[type=text] {
    background-color: #f1f1f1;
    width: 100%;
  }

  input[type=submit] {
    background-color: DodgerBlue;
    color: #fff;
    cursor: pointer;
  }

  .autocomplete-items {
    position: absolute;
    border: 1px solid #d4d4d4;
    border-bottom: none;
    border-top: none;
    z-index: 99;
    /*position the autocomplete items to be the same width as the container:*/
    top: 100%;
    left: 0;
    right: 0;
  }

  .autocomplete-items div {
    padding: 9px;
    cursor: pointer;
    background-color: #fff; 
    border-bottom: 1px solid #d4d4d4; 
  }

  /*when hovering an item:*/
  .autocomplete-items div:hover {
    background-color: #e9e9e9; 
  }

  /*when navigating through the items using the arrow keys:*/
  .autocomplete-active {
    background-color: DodgerBlue !important; 
    color: #ffffff; 
  }                  
