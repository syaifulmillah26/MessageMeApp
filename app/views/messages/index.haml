
=render "layouts/menus"
.container-fluid
  .ui.segment
    =render "layouts/flash_message"
    %h1 Chatroom Apps
    .row
      .col-md-4
        .card
          .card-header
            My Friends
          .card-body
            - @friends.each do |user|
              - user.friend_id
              .ui.middle.aligned.selection.list
                .item{ id: "#{user.friend_id}", onclick: "myFunction(this.id); goTo(this.id)"}
                  %img.ui.avatar.image{:src => "https://semantic-ui.com/images/avatar/small/helen.jpg"}/
                  .content
                    .header #{User.where(id: user.friend_id)&.first&.name} 
      .col-md-8
        .card#hideCard
          .card-header.header-name
            Chat with
          .card-body
            %div{class: "messages-0" }

            %form#message_form
              .ui.form.success
                .field
                  %input{:placeholder => "user_id", :type => "hidden", :name => "user_id", :class => "user_id"}
                .field
                  %input{:placeholder => "room_id", :type => "hidden", :name => "room_id", :class => "room_id"}
                .field
                  %input.float-left{id: "textarea", :placeholder => "Say Hello!", :type => "text", :name => "body", :class => "body", :autocomplete => "off"}
                  .button.float-right{id: "myBtn", onclick: "submit()"}  Send 


:javascript
  $(document).ready(function () {
    $("#hideCard").hide();
  });

  $("#message_form").submit(function(e) {
    e.preventDefault();
  });
  var input = document.getElementById("textarea");
  input.addEventListener("keyup", function(event) {
    if (event.keyCode === 13) {
    event.preventDefault();
    document.getElementById("myBtn").click();
    }
  });

  (function (factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(['jquery'], factory);
    } else if (typeof module === 'object' && typeof module.exports === 'object') {
      factory(require('jquery'));
    } else {
      // Browser globals
      factory(jQuery);
    }
  }(function ($) {
    $.timeago = function(timestamp) {
      if (timestamp instanceof Date) {
        return inWords(timestamp);
      } else if (typeof timestamp === "string") {
        return inWords($.timeago.parse(timestamp));
      } else if (typeof timestamp === "number") {
        return inWords(new Date(timestamp));
      } else {
        return inWords($.timeago.datetime(timestamp));
      }
    };
    var $t = $.timeago;

    $.extend($.timeago, {
      settings: {
        refreshMillis: 60000,
        allowPast: true,
        allowFuture: false,
        localeTitle: false,
        cutoff: 0,
        autoDispose: true,
        strings: {
          prefixAgo: null,
          prefixFromNow: null,
          suffixAgo: "ago",
          suffixFromNow: "from now",
          inPast: "any moment now",
          seconds: "less than a minute",
          minute: "about a minute",
          minutes: "%d minutes",
          hour: "about an hour",
          hours: "about %d hours",
          day: "a day",
          days: "%d days",
          month: "about a month",
          months: "%d months",
          year: "about a year",
          years: "%d years",
          wordSeparator: " ",
          numbers: []
        }
      },

      inWords: function(distanceMillis) {
        if (!this.settings.allowPast && ! this.settings.allowFuture) {
            throw 'timeago allowPast and allowFuture settings can not both be set to false.';
        }

        var $l = this.settings.strings;
        var prefix = $l.prefixAgo;
        var suffix = $l.suffixAgo;
        if (this.settings.allowFuture) {
          if (distanceMillis < 0) {
            prefix = $l.prefixFromNow;
            suffix = $l.suffixFromNow;
          }
        }

        if (!this.settings.allowPast && distanceMillis >= 0) {
          return this.settings.strings.inPast;
        }

        var seconds = Math.abs(distanceMillis) / 1000;
        var minutes = seconds / 60;
        var hours = minutes / 60;
        var days = hours / 24;
        var years = days / 365;

        window.substitute = function (stringOrFunction, number) {
          var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
          var value = ($l.numbers && $l.numbers[number]) || number;
          return string.replace(/%d/i, value);
        }

        var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) ||
          seconds < 90 && substitute($l.minute, 1) ||
          minutes < 45 && substitute($l.minutes, Math.round(minutes)) ||
          minutes < 90 && substitute($l.hour, 1) ||
          hours < 24 && substitute($l.hours, Math.round(hours)) ||
          hours < 42 && substitute($l.day, 1) ||
          days < 30 && substitute($l.days, Math.round(days)) ||
          days < 45 && substitute($l.month, 1) ||
          days < 365 && substitute($l.months, Math.round(days / 30)) ||
          years < 1.5 && substitute($l.year, 1) ||
          substitute($l.years, Math.round(years));

        var separator = $l.wordSeparator || "";
        if ($l.wordSeparator === undefined) { separator = " "; }
        return $.trim([prefix, words, suffix].join(separator));
      },

      parse: function(iso8601) {
        var s = $.trim(iso8601);
        s = s.replace(/\.\d+/,""); // remove milliseconds
        s = s.replace(/-/,"/").replace(/-/,"/");
        s = s.replace(/T/," ").replace(/Z/," UTC");
        s = s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"); // -04:00 -> -0400
        s = s.replace(/([\+\-]\d\d)$/," $100"); // +09 -> +0900
        return new Date(s);
      },
      datetime: function(elem) {
        var iso8601 = $t.isTime(elem) ? $(elem).attr("datetime") : $(elem).attr("title");
        return $t.parse(iso8601);
      },
      isTime: function(elem) {
        // jQuery's `is()` doesn't play well with HTML5 in IE
        return $(elem).get(0).tagName.toLowerCase() === "time"; // $(elem).is("time");
      }
    });

    // functions that can be called via $(el).timeago('action')
    // init is default when no action is given
    // functions are called with context of a single element
    var functions = {
      init: function() {
        functions.dispose.call(this);
        var refresh_el = $.proxy(refresh, this);
        refresh_el();
        var $s = $t.settings;
        if ($s.refreshMillis > 0) {
          this._timeagoInterval = setInterval(refresh_el, $s.refreshMillis);
        }
      },
      update: function(timestamp) {
        var date = (timestamp instanceof Date) ? timestamp : $t.parse(timestamp);
        $(this).data('timeago', { datetime: date });
        if ($t.settings.localeTitle) {
          $(this).attr("title", date.toLocaleString());
        }
        refresh.apply(this);
      },
      updateFromDOM: function() {
        $(this).data('timeago', { datetime: $t.parse( $t.isTime(this) ? $(this).attr("datetime") : $(this).attr("title") ) });
        refresh.apply(this);
      },
      dispose: function () {
        if (this._timeagoInterval) {
          window.clearInterval(this._timeagoInterval);
          this._timeagoInterval = null;
        }
      }
    };

    $.fn.timeago = function(action, options) {
      var fn = action ? functions[action] : functions.init;
      if (!fn) {
        throw new Error("Unknown function name '"+ action +"' for timeago");
      }
      // each over objects here and call the requested function
      this.each(function() {
        fn.call(this, options);
      });
      return this;
    };

    window.refresh = function () {
      var $s = $t.settings;

      //check if it's still visible
      if ($s.autoDispose && !$.contains(document.documentElement,this)) {
        //stop if it has been removed
        $(this).timeago("dispose");
        return this;
      }

      var data = prepareData(this);

      if (!isNaN(data.datetime)) {
        if ( $s.cutoff === 0 || Math.abs(distance(data.datetime)) < $s.cutoff) {
          $(this).text(inWords(data.datetime));
        } else {
          if ($(this).attr('title').length > 0) {
              $(this).text($(this).attr('title'));
          }
        }
      }
      return this;
    }

    window.prepareData = function (element) {
      element = $(element);
      if (!element.data("timeago")) {
        element.data("timeago", { datetime: $t.datetime(element) });
        var text = $.trim(element.text());
        if ($t.settings.localeTitle) {
          element.attr("title", element.data('timeago').datetime.toLocaleString());
        } else if (text.length > 0 && !($t.isTime(element) && element.attr("title"))) {
          element.attr("title", text);
        }
      }
      return element.data("timeago");
    }

    window.inWords = function(date) {
      return $t.inWords(distance(date));
    }

    window.distance = function(date) {
      return (new Date().getTime() - date.getTime());
    }

    // fix for IE6 suckage
    document.createElement("abbr");
    document.createElement("time");
  }));

:css
  li {
    list-style-type: none;
    margin: 2px 4px 4px 2px;
  }
  .list-group{
    border-radius: 0;
  }
  .messages-0{
    height: 400px;
    overflow: auto
  }

  input#textarea {
    height: 30px;
    width: 90%;
    border-radius: 10px;
    border: 1px solid black;
  }

  .button {
    margin-top: -1px;
    background-color: tomato;
    color: white;
    padding: 5px 18px;
    border-radius: 20px;
    border: 0;
    cursor: pointer;
  }
  ::-webkit-scrollbar {
    width: 0px;
    background: transparent; /* make scrollbar transparent */
  }