=render "layouts/menus"
.container-fluid
  .messaging
    .inbox_msg
      .inbox_people
        .headind_srch
          .recent_heading
            %h4 Recent
          .srch_bar
            .stylish-input-group
              %input.search-bar{:placeholder => "Search", :type => "text"}/
              %span.input-group-addon
                %button{:type => "button"}
                  %i.search.icon{"aria-hidden" => "true"}
        .inbox_chat
          - @friends.each do |user|
            - user.friend_id
            .chat_list{style: "cursor:pointer", id: "#{user.friend_id}", onclick: "myFunction(this.id); goTo(this.id)"}
              .chat_people
                .chat_img
                  %img{:alt => "sunil", :src => "https://ptetutorials.com/images/user-profile.png"}/
                .chat_ib
                  %h5
                    #{User.where(id: user.friend_id)&.first&.name}
                    %span.chat_date Dec 25
                  %p
                    Test, which is a new approach to have all solutions
                    astrology under one roof.
      .mesgs{id: "showMessage", style: "display:none"}
        .msg_history{id: "messageContent"}
          %div{class: "messages-0" }
        .type_msg
          .input_msg_write
            .field
              %input{:placeholder => "user_id", :type => "hidden", :name => "user_id", :class => "user_id"}
            .field
              %input{:placeholder => "room_id", :type => "hidden", :name => "room_id", :class => "room_id"}
            .field
              %input.write_msg{id: "textarea",:placeholder => "Type a message", :type => "text", :name => "body", :class => "body", :autocomplete => "off"}/
              %button.msg_send_btn{id: "myBtn", onclick: "submit()"}
                %i.paper.plane.icon{"aria-hidden" => "true"}
:css
  .container{max-width:1170px; margin:auto;}
  img{ max-width:100%;}
  .inbox_people {
    background: #f8f8f8 none repeat scroll 0 0;
    float: left;
    overflow: hidden;
    width: 40%; border-right:1px solid #c4c4c4;
  }
  .inbox_msg {
    border: 1px solid #c4c4c4;
    clear: both;
    overflow: hidden;
  }
  .top_spac{ margin: 20px 0 0;}


  .recent_heading {float: left; width:40%;}
  .srch_bar {
    display: inline-block;
    text-align: right;
    width: 60%; padding:
  }
  .headind_srch{ padding:10px 29px 10px 20px; overflow:hidden; border-bottom:1px solid #c4c4c4;}

  .recent_heading h4 {
    color: #05728f;
    font-size: 21px;
    margin: auto;
  }
  .srch_bar input{ border:1px solid #cdcdcd; border-width:0 0 1px 0; width:80%; padding:2px 0 4px 6px; background:none;}
  .srch_bar .input-group-addon button {
    background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
    border: medium none;
    padding: 0;
    color: #707070;
    font-size: 18px;
  }
  .srch_bar .input-group-addon { margin: 0 0 0 -27px;}

  .chat_ib h5{ font-size:15px; color:#464646; margin:0 0 8px 0;}
  .chat_ib h5 span{ font-size:13px; float:right;}
  .chat_ib p{ font-size:14px; color:#989898; margin:auto}
  .chat_img {
    float: left;
    width: 11%;
  }
  .chat_ib {
    float: left;
    padding: 0 0 0 15px;
    width: 88%;
  }

  .chat_people{ overflow:hidden; clear:both;}
  .chat_list {
    border-bottom: 1px solid #c4c4c4;
    margin: 0;
    padding: 18px 16px 10px;
  }
  .inbox_chat { height: 550px; overflow-y: scroll;}

  .active_chat{ background:#ebebeb;}

  .incoming_msg_img {
    display: inline-block;
    width: 6%;
  }
  .received_msg {
    display: inline-block;
    padding: 0 0 0 10px;
    vertical-align: top;
    width: 92%;
    margin-bottom: 20px;
  }
  .received_withd_msg p {
    background: #ebebeb none repeat scroll 0 0;
    border-radius: 3px;
    color: #646464;
    font-size: 14px;
    margin: 0;
    padding: 5px 10px 5px 12px;
    width: 100%;
  }
  .time_date {
    color: #747474;
    display: block;
    font-size: 12px;
    margin: 8px 0 0;
  }
  .received_withd_msg { width: 57%;}
  .mesgs {
    float: left;
    padding: 30px 15px 0 25px;
    width: 60%;
  }

  .sent_msg p {
    background: #05728f none repeat scroll 0 0;
    border-radius: 3px;
    font-size: 14px;
    margin: 0; color:#fff;
    padding: 5px 10px 5px 12px;
    width:100%;
  }
  .outgoing_msg{ overflow:hidden; margin:26px 0 26px;}
  .sent_msg {
    float: right;
    width: 46%;
    margin-right: 20px;
  }
  .input_msg_write input {
    background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
    border: medium none;
    color: #4c4c4c;
    font-size: 15px;
    min-height: 48px;
    width: 100%;
  }

  .type_msg {border-top: 1px solid #c4c4c4;position: relative;}
  .msg_send_btn {
    margin-right: 5px;
    margin-top: 6px;
    background: #05728f none repeat scroll 0 0;
    border: medium none;
    border-radius: 50%;
    color: #fff;
    cursor: pointer;
    font-size: 17px;
    height: 33px;
    position: absolute;
    right: 0;
    top: 11px;
    width: 33px;
  }
  .messaging { padding: 0 0 50px 0;}
  .msg_history {
    height: 499px;
    overflow-y: scroll;
  }         


:javascript
  $(document).ready(function () {
    $("#hideCard").hide();
  });

  $("#message_form").submit(function(e) {
    e.preventDefault();
  });
  var input = document.getElementById("textarea");
  input.addEventListener("keyup", function(event) {
    if (event.keyCode === 13) {
    event.preventDefault();
    document.getElementById("myBtn").click();
    }
  });

  (function (factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(['jquery'], factory);
    } else if (typeof module === 'object' && typeof module.exports === 'object') {
      factory(require('jquery'));
    } else {
      // Browser globals
      factory(jQuery);
    }
  }(function ($) {
    $.timeago = function(timestamp) {
      if (timestamp instanceof Date) {
        return inWords(timestamp);
      } else if (typeof timestamp === "string") {
        return inWords($.timeago.parse(timestamp));
      } else if (typeof timestamp === "number") {
        return inWords(new Date(timestamp));
      } else {
        return inWords($.timeago.datetime(timestamp));
      }
    };
    var $t = $.timeago;

    $.extend($.timeago, {
      settings: {
        refreshMillis: 60000,
        allowPast: true,
        allowFuture: false,
        localeTitle: false,
        cutoff: 0,
        autoDispose: true,
        strings: {
          prefixAgo: null,
          prefixFromNow: null,
          suffixAgo: "ago",
          suffixFromNow: "from now",
          inPast: "any moment now",
          seconds: "less than a minute",
          minute: "about a minute",
          minutes: "%d minutes",
          hour: "about an hour",
          hours: "about %d hours",
          day: "a day",
          days: "%d days",
          month: "about a month",
          months: "%d months",
          year: "about a year",
          years: "%d years",
          wordSeparator: " ",
          numbers: []
        }
      },

      inWords: function(distanceMillis) {
        if (!this.settings.allowPast && ! this.settings.allowFuture) {
            throw 'timeago allowPast and allowFuture settings can not both be set to false.';
        }

        var $l = this.settings.strings;
        var prefix = $l.prefixAgo;
        var suffix = $l.suffixAgo;
        if (this.settings.allowFuture) {
          if (distanceMillis < 0) {
            prefix = $l.prefixFromNow;
            suffix = $l.suffixFromNow;
          }
        }

        if (!this.settings.allowPast && distanceMillis >= 0) {
          return this.settings.strings.inPast;
        }

        var seconds = Math.abs(distanceMillis) / 1000;
        var minutes = seconds / 60;
        var hours = minutes / 60;
        var days = hours / 24;
        var years = days / 365;

        window.substitute = function (stringOrFunction, number) {
          var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
          var value = ($l.numbers && $l.numbers[number]) || number;
          return string.replace(/%d/i, value);
        }

        var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) ||
          seconds < 90 && substitute($l.minute, 1) ||
          minutes < 45 && substitute($l.minutes, Math.round(minutes)) ||
          minutes < 90 && substitute($l.hour, 1) ||
          hours < 24 && substitute($l.hours, Math.round(hours)) ||
          hours < 42 && substitute($l.day, 1) ||
          days < 30 && substitute($l.days, Math.round(days)) ||
          days < 45 && substitute($l.month, 1) ||
          days < 365 && substitute($l.months, Math.round(days / 30)) ||
          years < 1.5 && substitute($l.year, 1) ||
          substitute($l.years, Math.round(years));

        var separator = $l.wordSeparator || "";
        if ($l.wordSeparator === undefined) { separator = " "; }
        return $.trim([prefix, words, suffix].join(separator));
      },

      parse: function(iso8601) {
        var s = $.trim(iso8601);
        s = s.replace(/\.\d+/,""); // remove milliseconds
        s = s.replace(/-/,"/").replace(/-/,"/");
        s = s.replace(/T/," ").replace(/Z/," UTC");
        s = s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"); // -04:00 -> -0400
        s = s.replace(/([\+\-]\d\d)$/," $100"); // +09 -> +0900
        return new Date(s);
      },
      datetime: function(elem) {
        var iso8601 = $t.isTime(elem) ? $(elem).attr("datetime") : $(elem).attr("title");
        return $t.parse(iso8601);
      },
      isTime: function(elem) {
        // jQuery's `is()` doesn't play well with HTML5 in IE
        return $(elem).get(0).tagName.toLowerCase() === "time"; // $(elem).is("time");
      }
    });

    // functions that can be called via $(el).timeago('action')
    // init is default when no action is given
    // functions are called with context of a single element
    var functions = {
      init: function() {
        functions.dispose.call(this);
        var refresh_el = $.proxy(refresh, this);
        refresh_el();
        var $s = $t.settings;
        if ($s.refreshMillis > 0) {
          this._timeagoInterval = setInterval(refresh_el, $s.refreshMillis);
        }
      },
      update: function(timestamp) {
        var date = (timestamp instanceof Date) ? timestamp : $t.parse(timestamp);
        $(this).data('timeago', { datetime: date });
        if ($t.settings.localeTitle) {
          $(this).attr("title", date.toLocaleString());
        }
        refresh.apply(this);
      },
      updateFromDOM: function() {
        $(this).data('timeago', { datetime: $t.parse( $t.isTime(this) ? $(this).attr("datetime") : $(this).attr("title") ) });
        refresh.apply(this);
      },
      dispose: function () {
        if (this._timeagoInterval) {
          window.clearInterval(this._timeagoInterval);
          this._timeagoInterval = null;
        }
      }
    };

    $.fn.timeago = function(action, options) {
      var fn = action ? functions[action] : functions.init;
      if (!fn) {
        throw new Error("Unknown function name '"+ action +"' for timeago");
      }
      // each over objects here and call the requested function
      this.each(function() {
        fn.call(this, options);
      });
      return this;
    };

    window.refresh = function () {
      var $s = $t.settings;

      //check if it's still visible
      if ($s.autoDispose && !$.contains(document.documentElement,this)) {
        //stop if it has been removed
        $(this).timeago("dispose");
        return this;
      }

      var data = prepareData(this);

      if (!isNaN(data.datetime)) {
        if ( $s.cutoff === 0 || Math.abs(distance(data.datetime)) < $s.cutoff) {
          $(this).text(inWords(data.datetime));
        } else {
          if ($(this).attr('title').length > 0) {
              $(this).text($(this).attr('title'));
          }
        }
      }
      return this;
    }

    window.prepareData = function (element) {
      element = $(element);
      if (!element.data("timeago")) {
        element.data("timeago", { datetime: $t.datetime(element) });
        var text = $.trim(element.text());
        if ($t.settings.localeTitle) {
          element.attr("title", element.data('timeago').datetime.toLocaleString());
        } else if (text.length > 0 && !($t.isTime(element) && element.attr("title"))) {
          element.attr("title", text);
        }
      }
      return element.data("timeago");
    }

    window.inWords = function(date) {
      return $t.inWords(distance(date));
    }

    window.distance = function(date) {
      return (new Date().getTime() - date.getTime());
    }

    // fix for IE6 suckage
    document.createElement("abbr");
    document.createElement("time");
  }));

:css
  li {
    list-style-type: none;
    margin: 2px 4px 4px 2px;
  }
  .list-group{
    border-radius: 0;
  }
  

  .button {
    margin-top: -1px;
    background-color: tomato;
    color: white;
    padding: 5px 18px;
    border-radius: 20px;
    border: 0;
    cursor: pointer;
  }
  ::-webkit-scrollbar {
    width: 0px;
    background: transparent; /* make scrollbar transparent */
  }